import pygame

import random
        
pygame.init()

width,height = 1200,900
screen = pygame.display.set_mode((width,height))
pygame.display.set_caption("Snow")
pygame.display.set_caption('Level Editor')
pygame.display.set_caption('Platformer')


FPS = 120


#define game variables
tile_size = 50
GRAVITY = 1

x = 200
y = 200

#Define player action
moving_left = False
moving_right = False
moving_up = False
moving_down = False

class Walrus(pygame.sprite.Sprite):
    def __init__(self, char_type,x,y, scale,speed):
        pygame.sprite.Sprite.__init__(self)
        self.char_type= char_type
        self.speed = speed
        self.direction = 1
        self.flip = False
        img = pygame.image.load(f'0.png')
        self.image = pygame.transform.scale(img,(int(img.get_width()*scale),int(img.get_height()*scale)))
        self.rect = self.image.get_rect()
        self.vel_y = 0
        
    def move(self, moving_left,moving_right):
        #reset movement variables
        dx = 0
        dy = 0
        
        #gravity
        self.vel_y +=  GRAVITY
        dy += self.vel_y
        
        #assign movement variables if moving left or right
        if moving_left:
            dx = -self.speed
            self.flip = True
            self.direction = -1
        if moving_right:
            dx = self.speed
            self.flip = False
            self.direction = 1
            
          #ensure player doesn't go off the edge of the screen  
        if self.rect.left + dx < 0:
            dx = -self.rect.left
        if self.rect.right + dx > width:
            dx = width - self.rect.right
            
        #ensure player doesn't go off the edge of the screen
        if self.rect.bottom == draw_grid:
            dx = 3
            
        
        #check position with the ground
        if self.rect.bottom + dy > height:
            dy = 0
            self.vel_y = -20
        
        #update rectangle position
        self.rect.x += dx
        self.rect.y += dy
        
    def draw(self):
        screen.blit(pygame.transform.flip(self.image,self.flip, False),self.rect)

player = Walrus('player',200,200,1/13,5)
        
scale = 1/125
img = pygame.image.load('0.png')
img = pygame.transform.scale(img,(int(img.get_width()*scale),int(img.get_height()*scale)))
rect = img.get_rect()
rect.center = (x,y) 
sound = pygame.mixer.Sound('E2ZMYRQ-seal-barking.mp3')       
        
            
            
            
        


clock = pygame.time.Clock()
class Snow():
    def __init__(self):
        self.x = random.randint(0,width)
        self.y = 0
        self.v = random.uniform(2,3)
        self.r = random.randint(1,3)
    
    def move(self):
        self.y += self.v
        
    def draw(self):
        pygame.draw.circle(screen,(255,255,255),(self.x,self.y),self.r)


#load background images
mountain_img = pygame.image.load('mountain final1.png')
sky_img = pygame.image.load('sky1.jpg')

def draw_bg():
    screen.blit(sky_img, (0,0))
    screen.blit(mountain_img,(0,0))

def draw_grid():
	for line in range(0, 24):
		pygame.draw.line(screen, (255, 255, 255), (0, line * tile_size), (width, line * tile_size))
		pygame.draw.line(screen, (255, 255, 255), (line * tile_size, 0), (line * tile_size, height))

class World():
	def __init__(self, data):
		self.tile_list = []

		#load images
		ice_block_img = pygame.image.load('ice_block.png')
		ice_block1_img = pygame.image.load('ice_block1.png')
		water_block_img = pygame.image.load('water.gif')

		row_count = 0
		for row in data:
			col_count = 0
			for tile in row:
				if tile == 1:
					img = pygame.transform.scale(ice_block_img, (tile_size, tile_size))
					img_rect = img.get_rect()
					img_rect.x = col_count * tile_size
					img_rect.y = row_count * tile_size
					tile = (img, img_rect)
					self.tile_list.append(tile)
				if tile == 2:
					img = pygame.transform.scale(ice_block1_img, (tile_size, tile_size))
					img_rect = img.get_rect()
					img_rect.x = col_count * tile_size
					img_rect.y = row_count * tile_size
					tile = (img, img_rect)
					self.tile_list.append(tile)
				if tile == 3:
					img = pygame.transform.scale(water_block_img, (tile_size, tile_size))
					img_rect = img.get_rect()
					img_rect.x = col_count * tile_size
					img_rect.y = row_count * tile_size
					tile = (img, img_rect)
					self.tile_list.append(tile)
				col_count += 1
			row_count += 1

	def draw(self):
		for tile in self.tile_list:
			screen.blit(tile[0], tile[1])
   

world_data = [
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 2, 0, 0, 0, 2, 2, 0, 1, 1, 0, 0, 2, 2],
[0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1],
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
]




world = World(world_data)


running = True
snows = []

while running:
    
    draw_bg()
    clock.tick(60)
    world.draw()
    draw_grid()
    player.draw()
    player.move(moving_left,moving_right)
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running == False

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                moving_left = True
            if event.key == pygame.K_RIGHT:
                moving_right = True
            if event.key == pygame.K_ESCAPE:
                run = False
            if event.key == pygame.K_SPACE:
                sound.play()
        
        #Keyboard button released
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT:
                moving_left = False
            if event.key == pygame.K_RIGHT:
                moving_right = False
            if event.key == pygame.K_UP:
                moving_up = False
            if event.key == pygame.K_DOWN:
                moving_down = False
                
    if random.uniform(0,1) < 1/8:
        snows += [Snow() for i in range(random.randint(5,10))]
    for snow in snows:
        snow.move()
        snow.draw()
        if snow.y >= height:
            snows.remove(snow)
    pygame.display.update()
pygame.quit()

